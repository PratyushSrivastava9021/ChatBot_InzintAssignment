ðŸš€ AIML / Full Stack Take -Home Assignment  
Time Limit:  24 Hours  
Instructions:  
â€¢ Choose only ONE  of the two options below.  
â€¢ Focus on clean code, problem -solving, UI/UX, and clarity of explanation.  
â€¢ Deployment  and video explanation  will fetch bonus points . 
 
âœ… Option 1: Full Stack Web App (CRUD Project)  
Problem Statement:  
 Design and build a CRUD -based Web Application  to manage a simple task -tracking system. 
The app should allow users to:  
â€¢ Create  tasks (title, description, due date, priority).  
â€¢ Read/View  task list and details.  
â€¢ Update  existing tasks.  
â€¢ Delete  tasks.  
Must -Have Requirements:  
â€¢ Frontend (React / Vue / Next.js / any modern framework).  
â€¢ Backend API (Node.js / Django / Flask / FastAPI).  
â€¢ Database integration (MongoDB / PostgreSQL / MySQL).  
â€¢ RESTful API architecture.  
â€¢ Good UI/UX (Minimal yet intuitive).  
Bonus Points (Optional but recommended):  
â€¢ Deploy your project  (Render / Vercel / Netlify / Railway / AWS).  
â€¢ Add authentication  (simple login/register).  
â€¢ Add task status (Completed / Pending)  filter.  
â€¢ Use TypeScript  or strong typing if applicable.  
 
   
 
   
  
 
 
 
âœ… Option 2: AI/ML GenAI Chatbot Web App  
Problem Statement:  
 Design a simple Generative AI -based Chatbot  web app that can respond to user prompts.  
Must -Have Requirements:  
â€¢ UI where users can type prompts and receive responses.  
â€¢ Upload PDF and ask and get replies related to PDF.  
â€¢ Backend using any LLM API (OpenAI / Gemini / Cohere / Ollama / HuggingFace, etc).  
â€¢ Build the chatbot pipeline using proper API calls to the model.  
â€¢ Display chatbot responses in a chat -like UI.  
â€¢ Frontend using any modern JS framework (React / Vue / Next.js).  
â€¢ Backend using Flask / FastAPI / Node.js / Django.  
Bonus Points (Optional but recommended):  
â€¢ Deploy your chatbot web app . 
â€¢ Maintain chat history.  
â€¢ Add conversation reset option . 
â€¢ Use streaming responses  if possible.  
 
 
 
 
 
 
 
 
 
 
 
 
   
 
   
  
 
 
ðŸ“¹ Mandatory Submission Requirement:  
â€¢ Record a Loom / Screen Recording video  (max 10 mins):  
o Walk through your project.  
o Explain your thought process, tech stack, challenges, and solutions.  
o Demo your working app (even if partially complete).  
 
ðŸ“¦ Submission Checklist:  
â€¢ GitHub repo link (include README with setup instructions).  
â€¢ Loom video link.  
â€¢ Deployed project link (optional but bonus -worthy).  
 
ðŸ’¡ Evaluation Criteria:  
â€¢ Problem -solving approach.  
â€¢ Code quality and structure.  
â€¢ UI/UX quality.  
â€¢ Explanation clarity in Loom video.  
â€¢ Bonus for deployment and extra features.